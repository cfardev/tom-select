{"version":3,"file":"plugin.js","sources":["../../../../src/utils.ts","../../../../src/plugins/input_autogrow/plugin.ts"],"sourcesContent":["\r\nimport TomSelect from './tom-select';\r\nimport { TomLoadCallback } from './types/index';\r\n\r\n\r\n/**\r\n * Converts a scalar to its best string representation\r\n * for hash keys and HTML attribute values.\r\n *\r\n * Transformations:\r\n *   'str'     -> 'str'\r\n *   null      -> ''\r\n *   undefined -> ''\r\n *   true      -> '1'\r\n *   false     -> '0'\r\n *   0         -> '0'\r\n *   1         -> '1'\r\n *\r\n */\r\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\r\n\tif (typeof value === 'undefined' || value === null) return null;\r\n\treturn get_hash(value);\r\n};\r\n\r\nexport const get_hash = (value:boolean|string|number):string => {\r\n\tif (typeof value === 'boolean') return value ? '1' : '0';\r\n\treturn value + '';\r\n};\r\n\r\n/**\r\n * Escapes a string for use within HTML.\r\n *\r\n */\r\nexport const escape_html = (str:string):string => {\r\n\treturn (str + '')\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\n\r\n/**\r\n * use setTimeout if timeout > 0 \r\n */\r\nexport const timeout = (fn:()=>void,timeout:number) => {\r\n\tif( timeout > 0 ){\r\n\t\treturn setTimeout(fn,timeout);\r\n\t}\r\n\r\n\tfn.call(null);\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Debounce the user provided load function\r\n *\r\n */\r\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\r\n\tvar timeout: null|ReturnType<typeof setTimeout>;\r\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\r\n\t\tvar self = this;\r\n\r\n\t\tif( timeout ){\r\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\r\n\t\t\tclearTimeout(timeout);\r\n\t\t}\r\n\t\ttimeout = setTimeout(function() {\r\n\t\t\ttimeout = null;\r\n\t\t\tself.loadedSearches[value] = true;\r\n\t\t\tfn.call(self, value, callback);\r\n\r\n\t\t}, delay);\r\n\t};\r\n};\r\n\r\n\r\n/**\r\n * Debounce all fired events types listed in `types`\r\n * while executing the provided `fn`.\r\n *\r\n */\r\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\r\n\tvar type:string;\r\n\tvar trigger = self.trigger;\r\n\tvar event_args:{ [key: string]: any } = {};\r\n\r\n\t// override trigger method\r\n\tself.trigger = function(){\r\n\t\tvar type = arguments[0];\r\n\t\tif (types.indexOf(type) !== -1) {\r\n\t\t\tevent_args[type] = arguments;\r\n\t\t} else {\r\n\t\t\treturn trigger.apply(self, arguments);\r\n\t\t}\r\n\t};\r\n\r\n\t// invoke provided function\r\n\tfn.apply(self, []);\r\n\tself.trigger = trigger;\r\n\r\n\t// trigger queued events\r\n\tfor( type of types ){\r\n\t\tif( type in event_args ){\r\n\t\t\ttrigger.apply(self, event_args[type]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Determines the current selection within a text input control.\r\n * Returns an object containing:\r\n *   - start\r\n *   - length\r\n *\r\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\r\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\r\n */\r\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\r\n\treturn {\r\n\t\tstart\t: input.selectionStart || 0,\r\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\r\n\t};\r\n};\r\n\r\n\r\n/**\r\n * Prevent default\r\n *\r\n */\r\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\r\n\tif( evt ){\r\n\t\tevt.preventDefault();\r\n\t\tif( stop ){\r\n\t\t\tevt.stopPropagation();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Add event helper\r\n *\r\n */\r\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\r\n\ttarget.addEventListener(type,callback,options);\r\n};\r\n\r\n\r\n/**\r\n * Return true if the requested key is down\r\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\r\n * The current evt may not always set ( eg calling advanceSelection() )\r\n *\r\n */\r\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\r\n\r\n\tif( !evt ){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif( !evt[key_name] ){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\r\n\r\n\tif( count === 1 ){\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\n\r\n/**\r\n * Get the id of an element\r\n * If the id attribute is not set, set the attribute with the given id\r\n *\r\n */\r\nexport const getId = (el:Element,id:string) => {\r\n\tconst existing_id = el.getAttribute('id');\r\n\tif( existing_id ){\r\n\t\treturn existing_id;\r\n\t}\r\n\r\n\tel.setAttribute('id',id);\r\n\treturn id;\r\n};\r\n\r\n\r\n/**\r\n * Returns a string with backslashes added before characters that need to be escaped.\r\n */\r\nexport const addSlashes = (str:string):string => {\r\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\r\n};\r\n\r\n/**\r\n *\r\n */\r\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\r\n\tif( node ) parent.append(node);\r\n};\r\n","/**\r\n * Plugin: \"input_autogrow\" (Tom Select)\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\r\n * file except in compliance with the License. You may obtain a copy of the License at:\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\r\n * ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n *\r\n */\r\n\r\nimport TomSelect from '../../tom-select';\r\nimport { addEvent } from '../../utils';\r\n\r\nexport default function(this:TomSelect) {\r\n\tvar self\t\t\t\t\t= this;\r\n\r\n\tself.on('initialize',()=>{\r\n\r\n\r\n\t\tvar test_input\t\t\t\t= document.createElement('span');\r\n\t\tvar control\t\t\t\t\t= self.control_input;\r\n\t\ttest_input.style.cssText\t= 'position:absolute; top:-99999px; left:-99999px; width:auto; padding:0; white-space:pre; ';\r\n\r\n\t\tself.wrapper.appendChild(test_input);\r\n\r\n\r\n\t\tvar transfer_styles\t\t\t= [ 'letterSpacing', 'fontSize', 'fontFamily', 'fontWeight', 'textTransform' ];\r\n\r\n\t\tfor( const style_name of transfer_styles ){\r\n\t\t\t// @ts-ignore TS7015 https://stackoverflow.com/a/50506154/697576\r\n\t\t\ttest_input.style[style_name] = control.style[style_name];\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * Set the control width\r\n\t\t *\r\n\t\t */\r\n\t\tvar resize = ()=>{\r\n\t\t\ttest_input.textContent\t= control.value;\r\n\t\t\tcontrol.style.width\t\t= test_input.clientWidth+'px';\r\n\t\t};\r\n\r\n\t\tresize();\r\n\t\tself.on('update item_add item_remove',resize);\r\n\t\taddEvent(control,'input', resize );\r\n\t\taddEvent(control,'keyup', resize );\r\n\t\taddEvent(control,'blur', resize );\r\n\t\taddEvent(control,'update', resize );\r\n\t});\r\n\r\n};\r\n"],"names":["addEvent","target","type","callback","options","addEventListener","self","on","test_input","document","createElement","control","control_input","style","cssText","wrapper","appendChild","transfer_styles","style_name","resize","textContent","value","width","clientWidth"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA2HA;AACA;AACA;AACA;AACO,MAAMA,QAAQ,GAAGA,CAACC,MAAkB,EAAEC,IAAW,EAAEC,QAA2C,EAAEC,OAAe,KAAU;EAC/HH,MAAM,CAACI,gBAAgB,CAACH,IAAI,EAACC,QAAQ,EAACC,OAAO,CAAC,CAAA;AAC/C,CAAC;;ACnJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKe,eAAyB,IAAA;EACvC,IAAIE,IAAI,GAAO,IAAI,CAAA;AAEnBA,EAAAA,IAAI,CAACC,EAAE,CAAC,YAAY,EAAC,MAAI;AAGxB,IAAA,IAAIC,UAAU,GAAMC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAAA;AAClD,IAAA,IAAIC,OAAO,GAAOL,IAAI,CAACM,aAAa,CAAA;AACpCJ,IAAAA,UAAU,CAACK,KAAK,CAACC,OAAO,GAAG,0FAA0F,CAAA;AAErHR,IAAAA,IAAI,CAACS,OAAO,CAACC,WAAW,CAACR,UAAU,CAAC,CAAA;AAGpC,IAAA,IAAIS,eAAe,GAAK,CAAE,eAAe,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,eAAe,CAAE,CAAA;AAEpG,IAAA,KAAK,MAAMC,UAAU,IAAID,eAAe,EAAE;AACzC;MACAT,UAAU,CAACK,KAAK,CAACK,UAAU,CAAC,GAAGP,OAAO,CAACE,KAAK,CAACK,UAAU,CAAC,CAAA;AACzD,KAAA;;AAGA;AACF;AACA;AACA;IACE,IAAIC,MAAM,GAAGA,MAAI;AAChBX,MAAAA,UAAU,CAACY,WAAW,GAAGT,OAAO,CAACU,KAAK,CAAA;MACtCV,OAAO,CAACE,KAAK,CAACS,KAAK,GAAId,UAAU,CAACe,WAAW,GAAC,IAAI,CAAA;KAClD,CAAA;AAEDJ,IAAAA,MAAM,EAAE,CAAA;AACRb,IAAAA,IAAI,CAACC,EAAE,CAAC,6BAA6B,EAACY,MAAM,CAAC,CAAA;AAC7CnB,IAAAA,QAAQ,CAACW,OAAO,EAAC,OAAO,EAAEQ,MAAO,CAAC,CAAA;AAClCnB,IAAAA,QAAQ,CAACW,OAAO,EAAC,OAAO,EAAEQ,MAAO,CAAC,CAAA;AAClCnB,IAAAA,QAAQ,CAACW,OAAO,EAAC,MAAM,EAAEQ,MAAO,CAAC,CAAA;AACjCnB,IAAAA,QAAQ,CAACW,OAAO,EAAC,QAAQ,EAAEQ,MAAO,CAAC,CAAA;AACpC,GAAC,CAAC,CAAA;AAEH;;;;"}