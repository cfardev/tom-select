{"version":3,"file":"plugin.js","sources":["../../../../node_modules/@orchidjs/unicode-variants/dist/esm/index.js","../../../../node_modules/@orchidjs/sifter/lib/utils.ts","../../../../src/vanilla.ts","../../../../src/plugins/virtual_scroll/plugin.ts"],"sourcesContent":["/*! @orchidjs/unicode-variants | https://github.com/orchidjs/unicode-variants | Apache License (v2) */\nimport { toArray, setToPattern, escape_regex, arrayToPattern, sequencePattern } from './regex.js';\nexport { escape_regex } from './regex.js';\nimport { allSubstrings } from './strings.js';\n\n/**\n * @typedef {{[key:string]:string}} TUnicodeMap\n * @typedef {{[key:string]:Set<string>}} TUnicodeSets\n * @typedef {[[number,number]]} TCodePoints\n * @typedef {{folded:string,composed:string,code_point:number}} TCodePointObj\n * @typedef {{start:number,end:number,length:number,substr:string}} TSequencePart\n */\n/** @type {TCodePoints} */\n\nconst code_points = [[0, 65535]];\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}\\u{2bc}]';\n/** @type {TUnicodeMap} */\n\nlet unicode_map;\n/** @type {RegExp} */\n\nlet multi_char_reg;\nconst max_char_length = 3;\n/** @type {TUnicodeMap} */\n\nconst latin_convert = {};\n/** @type {TUnicodeMap} */\n\nconst latin_condensed = {\n  '/': '⁄∕',\n  '0': '߀',\n  \"a\": \"ⱥɐɑ\",\n  \"aa\": \"ꜳ\",\n  \"ae\": \"æǽǣ\",\n  \"ao\": \"ꜵ\",\n  \"au\": \"ꜷ\",\n  \"av\": \"ꜹꜻ\",\n  \"ay\": \"ꜽ\",\n  \"b\": \"ƀɓƃ\",\n  \"c\": \"ꜿƈȼↄ\",\n  \"d\": \"đɗɖᴅƌꮷԁɦ\",\n  \"e\": \"ɛǝᴇɇ\",\n  \"f\": \"ꝼƒ\",\n  \"g\": \"ǥɠꞡᵹꝿɢ\",\n  \"h\": \"ħⱨⱶɥ\",\n  \"i\": \"ɨı\",\n  \"j\": \"ɉȷ\",\n  \"k\": \"ƙⱪꝁꝃꝅꞣ\",\n  \"l\": \"łƚɫⱡꝉꝇꞁɭ\",\n  \"m\": \"ɱɯϻ\",\n  \"n\": \"ꞥƞɲꞑᴎлԉ\",\n  \"o\": \"øǿɔɵꝋꝍᴑ\",\n  \"oe\": \"œ\",\n  \"oi\": \"ƣ\",\n  \"oo\": \"ꝏ\",\n  \"ou\": \"ȣ\",\n  \"p\": \"ƥᵽꝑꝓꝕρ\",\n  \"q\": \"ꝗꝙɋ\",\n  \"r\": \"ɍɽꝛꞧꞃ\",\n  \"s\": \"ßȿꞩꞅʂ\",\n  \"t\": \"ŧƭʈⱦꞇ\",\n  \"th\": \"þ\",\n  \"tz\": \"ꜩ\",\n  \"u\": \"ʉ\",\n  \"v\": \"ʋꝟʌ\",\n  \"vy\": \"ꝡ\",\n  \"w\": \"ⱳ\",\n  \"y\": \"ƴɏỿ\",\n  \"z\": \"ƶȥɀⱬꝣ\",\n  \"hv\": \"ƕ\"\n};\n\nfor (let latin in latin_condensed) {\n  let unicode = latin_condensed[latin] || '';\n\n  for (let i = 0; i < unicode.length; i++) {\n    let char = unicode.substring(i, i + 1);\n    latin_convert[char] = latin;\n  }\n}\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|') + '|' + accent_pat, 'gu');\n/**\n * Initialize the unicode_map from the give code point ranges\n *\n * @param {TCodePoints=} _code_points\n */\n\nconst initialize = _code_points => {\n  if (unicode_map !== undefined) return;\n  unicode_map = generateMap(_code_points || code_points);\n};\n/**\n * Helper method for normalize a string\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n * @param {string} str\n * @param {string} form\n */\n\nconst normalize = (str, form = 'NFKD') => str.normalize(form);\n/**\n * Remove accents without reordering string\n * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n * @param {string} str\n * @return {string}\n */\n\nconst asciifold = str => {\n  return toArray(str).reduce(\n  /**\n   * @param {string} result\n   * @param {string} char\n   */\n  (result, char) => {\n    return result + _asciifold(char);\n  }, '');\n};\n/**\n * @param {string} str\n * @return {string}\n */\n\nconst _asciifold = str => {\n  str = normalize(str).toLowerCase().replace(convert_pat, (\n  /** @type {string} */\n  char) => {\n    return latin_convert[char] || '';\n  }); //return str;\n\n  return normalize(str, 'NFC');\n};\n/**\n * Generate a list of unicode variants from the list of code points\n * @param {TCodePoints} code_points\n * @yield {TCodePointObj}\n */\n\nfunction* generator(code_points) {\n  for (const [code_point_min, code_point_max] of code_points) {\n    for (let i = code_point_min; i <= code_point_max; i++) {\n      let composed = String.fromCharCode(i);\n      let folded = asciifold(composed);\n\n      if (folded == composed.toLowerCase()) {\n        continue;\n      } // skip when folded is a string longer than 3 characters long\n      // bc the resulting regex patterns will be long\n      // eg:\n      // folded صلى الله عليه وسلم length 18 code point 65018\n      // folded جل جلاله length 8 code point 65019\n\n\n      if (folded.length > max_char_length) {\n        continue;\n      }\n\n      if (folded.length == 0) {\n        continue;\n      }\n\n      yield {\n        folded: folded,\n        composed: composed,\n        code_point: i\n      };\n    }\n  }\n}\n/**\n * Generate a unicode map from the list of code points\n * @param {TCodePoints} code_points\n * @return {TUnicodeSets}\n */\n\nconst generateSets = code_points => {\n  /** @type {{[key:string]:Set<string>}} */\n  const unicode_sets = {};\n  /**\n   * @param {string} folded\n   * @param {string} to_add\n   */\n\n  const addMatching = (folded, to_add) => {\n    /** @type {Set<string>} */\n    const folded_set = unicode_sets[folded] || new Set();\n    const patt = new RegExp('^' + setToPattern(folded_set) + '$', 'iu');\n\n    if (to_add.match(patt)) {\n      return;\n    }\n\n    folded_set.add(escape_regex(to_add));\n    unicode_sets[folded] = folded_set;\n  };\n\n  for (let value of generator(code_points)) {\n    addMatching(value.folded, value.folded);\n    addMatching(value.folded, value.composed);\n  }\n\n  return unicode_sets;\n};\n/**\n * Generate a unicode map from the list of code points\n * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n *\n * @param {TCodePoints} code_points\n * @return {TUnicodeMap}\n */\n\nconst generateMap = code_points => {\n  /** @type {TUnicodeSets} */\n  const unicode_sets = generateSets(code_points);\n  /** @type {TUnicodeMap} */\n\n  const unicode_map = {};\n  /** @type {string[]} */\n\n  let multi_char = [];\n\n  for (let folded in unicode_sets) {\n    let set = unicode_sets[folded];\n\n    if (set) {\n      unicode_map[folded] = setToPattern(set);\n    }\n\n    if (folded.length > 1) {\n      multi_char.push(escape_regex(folded));\n    }\n  }\n\n  multi_char.sort((a, b) => b.length - a.length);\n  const multi_char_patt = arrayToPattern(multi_char);\n  multi_char_reg = new RegExp('^' + multi_char_patt, 'u');\n  return unicode_map;\n};\n/**\n * Map each element of an array from it's folded value to all possible unicode matches\n * @param {string[]} strings\n * @param {number} min_replacement\n * @return {string}\n */\n\nconst mapSequence = (strings, min_replacement = 1) => {\n  let chars_replaced = 0;\n  strings = strings.map(str => {\n    if (unicode_map[str]) {\n      chars_replaced += str.length;\n    }\n\n    return unicode_map[str] || str;\n  });\n\n  if (chars_replaced >= min_replacement) {\n    return sequencePattern(strings);\n  }\n\n  return '';\n};\n/**\n * Convert a short string and split it into all possible patterns\n * Keep a pattern only if min_replacement is met\n *\n * 'abc'\n * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n *\t\t=> ['abc-pattern','ab-c-pattern'...]\n *\n *\n * @param {string} str\n * @param {number} min_replacement\n * @return {string}\n */\n\nconst substringsToPattern = (str, min_replacement = 1) => {\n  min_replacement = Math.max(min_replacement, str.length - 1);\n  return arrayToPattern(allSubstrings(str).map(sub_pat => {\n    return mapSequence(sub_pat, min_replacement);\n  }));\n};\n/**\n * Convert an array of sequences into a pattern\n * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n *\n * @param {Sequence[]} sequences\n * @param {boolean} all\n */\n\nconst sequencesToPattern = (sequences, all = true) => {\n  let min_replacement = sequences.length > 1 ? 1 : 0;\n  return arrayToPattern(sequences.map(sequence => {\n    let seq = [];\n    const len = all ? sequence.length() : sequence.length() - 1;\n\n    for (let j = 0; j < len; j++) {\n      seq.push(substringsToPattern(sequence.substrs[j] || '', min_replacement));\n    }\n\n    return sequencePattern(seq);\n  }));\n};\n/**\n * Return true if the sequence is already in the sequences\n * @param {Sequence} needle_seq\n * @param {Sequence[]} sequences\n */\n\n\nconst inSequences = (needle_seq, sequences) => {\n  for (const seq of sequences) {\n    if (seq.start != needle_seq.start || seq.end != needle_seq.end) {\n      continue;\n    }\n\n    if (seq.substrs.join('') !== needle_seq.substrs.join('')) {\n      continue;\n    }\n\n    let needle_parts = needle_seq.parts;\n    /**\n     * @param {TSequencePart} part\n     */\n\n    const filter = part => {\n      for (const needle_part of needle_parts) {\n        if (needle_part.start === part.start && needle_part.substr === part.substr) {\n          return false;\n        }\n\n        if (part.length == 1 || needle_part.length == 1) {\n          continue;\n        } // check for overlapping parts\n        // a = ['::=','==']\n        // b = ['::','===']\n        // a = ['r','sm']\n        // b = ['rs','m']\n\n\n        if (part.start < needle_part.start && part.end > needle_part.start) {\n          return true;\n        }\n\n        if (needle_part.start < part.start && needle_part.end > part.start) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    let filtered = seq.parts.filter(filter);\n\n    if (filtered.length > 0) {\n      continue;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nclass Sequence {\n  constructor() {\n    /** @type {TSequencePart[]} */\n    this.parts = [];\n    /** @type {string[]} */\n\n    this.substrs = [];\n    this.start = 0;\n    this.end = 0;\n  }\n  /**\n   * @param {TSequencePart|undefined} part\n   */\n\n\n  add(part) {\n    if (part) {\n      this.parts.push(part);\n      this.substrs.push(part.substr);\n      this.start = Math.min(part.start, this.start);\n      this.end = Math.max(part.end, this.end);\n    }\n  }\n\n  last() {\n    return this.parts[this.parts.length - 1];\n  }\n\n  length() {\n    return this.parts.length;\n  }\n  /**\n   * @param {number} position\n   * @param {TSequencePart} last_piece\n   */\n\n\n  clone(position, last_piece) {\n    let clone = new Sequence();\n    let parts = JSON.parse(JSON.stringify(this.parts));\n    let last_part = parts.pop();\n\n    for (const part of parts) {\n      clone.add(part);\n    }\n\n    let last_substr = last_piece.substr.substring(0, position - last_part.start);\n    let clone_last_len = last_substr.length;\n    clone.add({\n      start: last_part.start,\n      end: last_part.start + clone_last_len,\n      length: clone_last_len,\n      substr: last_substr\n    });\n    return clone;\n  }\n\n}\n/**\n * Expand a regular expression pattern to include unicode variants\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * Issue:\n *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n *\n *\tİĲ = IIJ = ⅡJ\n *\n * \t1/2/4\n *\n * @param {string} str\n * @return {string|undefined}\n */\n\n\nconst getPattern = str => {\n  initialize();\n  str = asciifold(str);\n  let pattern = '';\n  let sequences = [new Sequence()];\n\n  for (let i = 0; i < str.length; i++) {\n    let substr = str.substring(i);\n    let match = substr.match(multi_char_reg);\n    const char = str.substring(i, i + 1);\n    const match_str = match ? match[0] : null; // loop through sequences\n    // add either the char or multi_match\n\n    let overlapping = [];\n    let added_types = new Set();\n\n    for (const sequence of sequences) {\n      const last_piece = sequence.last();\n\n      if (!last_piece || last_piece.length == 1 || last_piece.end <= i) {\n        // if we have a multi match\n        if (match_str) {\n          const len = match_str.length;\n          sequence.add({\n            start: i,\n            end: i + len,\n            length: len,\n            substr: match_str\n          });\n          added_types.add('1');\n        } else {\n          sequence.add({\n            start: i,\n            end: i + 1,\n            length: 1,\n            substr: char\n          });\n          added_types.add('2');\n        }\n      } else if (match_str) {\n        let clone = sequence.clone(i, last_piece);\n        const len = match_str.length;\n        clone.add({\n          start: i,\n          end: i + len,\n          length: len,\n          substr: match_str\n        });\n        overlapping.push(clone);\n      } else {\n        // don't add char\n        // adding would create invalid patterns: 234 => [2,34,4]\n        added_types.add('3');\n      }\n    } // if we have overlapping\n\n\n    if (overlapping.length > 0) {\n      // ['ii','iii'] before ['i','i','iii']\n      overlapping = overlapping.sort((a, b) => {\n        return a.length() - b.length();\n      });\n\n      for (let clone of overlapping) {\n        // don't add if we already have an equivalent sequence\n        if (inSequences(clone, sequences)) {\n          continue;\n        }\n\n        sequences.push(clone);\n      }\n\n      continue;\n    } // if we haven't done anything unique\n    // clean up the patterns\n    // helps keep patterns smaller\n    // if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n\n\n    if (i > 0 && added_types.size == 1 && !added_types.has('3')) {\n      pattern += sequencesToPattern(sequences, false);\n      let new_seq = new Sequence();\n      const old_seq = sequences[0];\n\n      if (old_seq) {\n        new_seq.add(old_seq.last());\n      }\n\n      sequences = [new_seq];\n    }\n  }\n\n  pattern += sequencesToPattern(sequences, true);\n  return pattern;\n};\n\nexport { _asciifold, asciifold, code_points, generateMap, generateSets, generator, getPattern, initialize, mapSequence, normalize, substringsToPattern, unicode_map };\n//# sourceMappingURL=index.js.map\n","\nimport { asciifold } from '@orchidjs/unicode-variants';\nimport * as T from './types';\n\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttr = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    return obj[name];\n};\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttrNesting = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    var part, names = name.split(\".\");\n\twhile( (part = names.shift()) && (obj = obj[part]));\n    return obj;\n};\n\n/**\n * Calculates how close of a match the\n * given value is against a search token.\n *\n */\nexport const scoreValue = (value:string, token:T.Token, weight:number ):number => {\n\tvar score, pos;\n\n\tif (!value) return 0;\n\n\tvalue = value + '';\n\tif( token.regex == null ) return 0;\n\tpos = value.search(token.regex);\n\tif (pos === -1) return 0;\n\n\tscore = token.string.length / value.length;\n\tif (pos === 0) score += 0.5;\n\n\treturn score * weight;\n};\n\n\n/**\n * Cast object property to an array if it exists and has a value\n *\n */\nexport const propToArray = (obj:{[key:string]:any}, key:string) => {\n\tvar value = obj[key];\n\n\tif( typeof value == 'function' ) return value;\n\n\tif( value && !Array.isArray(value) ){\n\t\tobj[key] = [value];\n\t}\n}\n\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\nexport const cmp = (a:number|string, b:number|string) => {\n\tif (typeof a === 'number' && typeof b === 'number') {\n\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t}\n\ta = asciifold(a + '').toLowerCase();\n\tb = asciifold(b + '').toLowerCase();\n\tif (a > b) return 1;\n\tif (b > a) return -1;\n\treturn 0;\n};\n","import { iterate } from \"@orchidjs/sifter/lib/utils\";\r\n\r\n/**\r\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\r\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\r\n *\r\n * param query should be {}\r\n */\r\nexport const getDom = (query: any): HTMLElement => {\r\n\tif (query.jquery) {\r\n\t\treturn query[0];\r\n\t}\r\n\r\n\tif (query instanceof HTMLElement) {\r\n\t\treturn query;\r\n\t}\r\n\r\n\tif (isHtmlString(query)) {\r\n\t\tvar tpl = document.createElement(\"template\");\r\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\r\n\t\treturn tpl.content.firstChild as HTMLElement;\r\n\t}\r\n\r\n\treturn document.querySelector(query);\r\n};\r\n\r\nexport const isHtmlString = (arg: any): boolean => {\r\n\tif (typeof arg === \"string\" && arg.indexOf(\"<\") > -1) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nexport const escapeQuery = (query: string): string => {\r\n\treturn query.replace(/['\"\\\\]/g, \"\\\\$&\");\r\n};\r\n\r\n/**\r\n * Dispatch an event\r\n *\r\n */\r\nexport const triggerEvent = (dom_el: HTMLElement, event_name: string): void => {\r\n\tvar event = document.createEvent(\"HTMLEvents\");\r\n\tevent.initEvent(event_name, true, false);\r\n\tdom_el.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Apply CSS rules to a dom element\r\n *\r\n */\r\nexport const applyCSS = (\r\n\tdom_el: HTMLElement,\r\n\tcss: { [key: string]: string | number }\r\n): void => {\r\n\tObject.assign(dom_el.style, css);\r\n};\r\n\r\n/**\r\n * Add css classes\r\n *\r\n */\r\nexport const addClasses = (\r\n\telmts: HTMLElement | HTMLElement[],\r\n\t...classes: string[] | string[][]\r\n) => {\r\n\tvar norm_classes = classesArray(classes);\r\n\telmts = castAsArray(elmts);\r\n\r\n\telmts.map((el) => {\r\n\t\tnorm_classes.map((cls) => {\r\n\t\t\tel.classList.add(cls);\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * Remove css classes\r\n *\r\n */\r\nexport const removeClasses = (\r\n\telmts: HTMLElement | HTMLElement[],\r\n\t...classes: string[] | string[][]\r\n) => {\r\n\tvar norm_classes = classesArray(classes);\r\n\telmts = castAsArray(elmts);\r\n\r\n\telmts.map((el) => {\r\n\t\tnorm_classes.map((cls) => {\r\n\t\t\tel.classList.remove(cls);\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * Return arguments\r\n *\r\n */\r\nexport const classesArray = (args: string[] | string[][]): string[] => {\r\n\tvar classes: string[] = [];\r\n\titerate(args, (_classes) => {\r\n\t\tif (typeof _classes === \"string\") {\r\n\t\t\t_classes = _classes.trim().split(/[\\x09\\x0a\\x0c\\x0d\\x20]/);\r\n\t\t}\r\n\t\tif (Array.isArray(_classes)) {\r\n\t\t\tclasses = classes.concat(_classes);\r\n\t\t}\r\n\t});\r\n\r\n\treturn classes.filter(Boolean);\r\n};\r\n\r\n/**\r\n * Create an array from arg if it's not already an array\r\n *\r\n */\r\nexport const castAsArray = (arg: any): Array<any> => {\r\n\tif (!Array.isArray(arg)) {\r\n\t\targ = [arg];\r\n\t}\r\n\treturn arg;\r\n};\r\n\r\n/**\r\n * Get the closest node to the evt.target matching the selector\r\n * Stops at wrapper\r\n *\r\n */\r\nexport const parentMatch = (\r\n\ttarget: null | HTMLElement,\r\n\tselector: string,\r\n\twrapper?: HTMLElement\r\n): HTMLElement | void => {\r\n\tif (wrapper && !wrapper.contains(target)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\twhile (target && target.matches) {\r\n\t\tif (target.matches(selector)) {\r\n\t\t\treturn target;\r\n\t\t}\r\n\r\n\t\ttarget = target.parentNode as HTMLElement;\r\n\t}\r\n};\r\n\r\n/**\r\n * Get the first or last item from an array\r\n *\r\n * > 0 - right (last)\r\n * <= 0 - left (first)\r\n *\r\n */\r\nexport const getTail = (\r\n\tlist: Array<any> | NodeList,\r\n\tdirection: number = 0\r\n): any => {\r\n\tif (direction > 0) {\r\n\t\treturn list[list.length - 1];\r\n\t}\r\n\r\n\treturn list[0];\r\n};\r\n\r\n/**\r\n * Return true if an object is empty\r\n *\r\n */\r\nexport const isEmptyObject = (obj: object): boolean => {\r\n\treturn Object.keys(obj).length === 0;\r\n};\r\n\r\n/**\r\n * Get the index of an element amongst sibling nodes of the same type\r\n *\r\n */\r\nexport const nodeIndex = (el: null | Element, amongst?: string): number => {\r\n\tif (!el) return -1;\r\n\r\n\tamongst = amongst || el.nodeName;\r\n\r\n\tvar i = 0;\r\n\twhile ((el = el.previousElementSibling)) {\r\n\t\tif (el.matches(amongst)) {\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\treturn i;\r\n};\r\n\r\n/**\r\n * Set attributes of an element\r\n *\r\n */\r\nexport const setAttr = (\r\n\tel: Element,\r\n\tattrs: { [key: string]: null | string | number }\r\n) => {\r\n\titerate(attrs, (val, attr) => {\r\n\t\tif (val == null) {\r\n\t\t\tel.removeAttribute(attr as string);\r\n\t\t} else {\r\n\t\t\tel.setAttribute(attr as string, \"\" + val);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/**\r\n * Replace a node\r\n */\r\nexport const replaceNode = (existing: Node, replacement: Node) => {\r\n\tif (existing.parentNode)\r\n\t\texisting.parentNode.replaceChild(replacement, existing);\r\n};\r\n","/**\r\n * Plugin: \"restore_on_backspace\" (Tom Select)\r\n * Copyright (c) contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\r\n * file except in compliance with the License. You may obtain a copy of the License at:\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\r\n * ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n *\r\n */\r\n\r\nimport TomSelect from '../../tom-select';\r\nimport { TomOption } from '../../types/index';\r\nimport { addClasses } from '../../vanilla';\r\n\r\nexport default function(this:TomSelect) {\r\n\tconst self\t\t\t\t\t\t\t= this;\r\n\tconst orig_canLoad\t\t\t\t\t= self.canLoad;\r\n\tconst orig_clearActiveOption\t\t= self.clearActiveOption;\r\n\tconst orig_loadCallback\t\t\t\t= self.loadCallback;\r\n\r\n\tvar pagination:{[key:string]:any}\t= {};\r\n\tvar dropdown_content:HTMLElement;\r\n\tvar loading_more\t\t\t\t\t= false;\r\n\tvar load_more_opt:HTMLElement;\r\n\tvar default_values: string[]\t\t= [];\r\n\r\n\tif( !self.settings.shouldLoadMore ){\r\n\r\n\t\t// return true if additional results should be loaded\r\n\t\tself.settings.shouldLoadMore = ():boolean=>{\r\n\r\n\t\t\tconst scroll_percent = dropdown_content.clientHeight / (dropdown_content.scrollHeight - dropdown_content.scrollTop);\r\n\t\t\tif( scroll_percent > 0.9 ){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif( self.activeOption ){\r\n\t\t\t\tvar selectable\t= self.selectable();\r\n\t\t\t\tvar index\t\t= Array.from(selectable).indexOf(self.activeOption);\r\n\t\t\t\tif( index >= (selectable.length-2) ){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tif( !self.settings.firstUrl ){\r\n\t\tthrow 'virtual_scroll plugin requires a firstUrl() method';\r\n\t}\r\n\r\n\r\n\t// in order for virtual scrolling to work,\r\n\t// options need to be ordered the same way they're returned from the remote data source\r\n\tself.settings.sortField\t\t\t= [{field:'$order'},{field:'$score'}];\r\n\r\n\r\n\t// can we load more results for given query?\r\n\tconst canLoadMore = (query:string):boolean => {\r\n\r\n\t\tif( typeof self.settings.maxOptions === 'number' && dropdown_content.children.length >= self.settings.maxOptions ){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif( (query in pagination) && pagination[query] ){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst clearFilter = (option:TomOption, value:string):boolean => {\r\n\t\tif( self.items.indexOf(value) >= 0 || default_values.indexOf(value) >= 0 ){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\t// set the next url that will be\r\n\tself.setNextUrl = (value:string,next_url:any):void => {\r\n\t\tpagination[value] = next_url;\r\n\t};\r\n\r\n\t// getUrl() to be used in settings.load()\r\n\tself.getUrl = (query:string):any =>{\r\n\r\n\t\tif( query in pagination ){\r\n\t\t\tconst next_url = pagination[query];\r\n\t\t\tpagination[query] = false;\r\n\t\t\treturn next_url;\r\n\t\t}\r\n\r\n\t\t// if the user goes back to a previous query\r\n\t\t// we need to load the first page again\r\n\t\tself.clearPagination();\r\n\r\n\t\treturn self.settings.firstUrl.call(self,query);\r\n\t};\r\n\r\n\t// clear pagination\r\n\tself.clearPagination = ():void =>{\r\n\t\tpagination = {};\r\n\t};\r\n\r\n\t// don't clear the active option (and cause unwanted dropdown scroll)\r\n\t// while loading more results\r\n\tself.hook('instead','clearActiveOption',()=>{\r\n\r\n\t\tif( loading_more ){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn orig_clearActiveOption.call(self);\r\n\t});\r\n\r\n\t// override the canLoad method\r\n\tself.hook('instead','canLoad',(query:string)=>{\r\n\r\n\t\t// first time the query has been seen\r\n\t\tif( !(query in pagination) ){\r\n\t\t\treturn orig_canLoad.call(self,query);\r\n\t\t}\r\n\r\n\t\treturn canLoadMore(query);\r\n\t});\r\n\r\n\r\n\t// wrap the load\r\n\tself.hook('instead','loadCallback',( options:TomOption[], optgroups:TomOption[])=>{\r\n\r\n\t\tif( !loading_more ){\r\n\t\t\tself.clearOptions(clearFilter);\r\n\t\t}else if( load_more_opt ){\r\n\t\t\tconst first_option = options[0];\r\n\t\t\tif( first_option !== undefined ){\r\n\t\t\t\tload_more_opt.dataset.value\t\t= first_option[self.settings.valueField];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\torig_loadCallback.call( self, options, optgroups);\r\n\r\n\t\tloading_more = false;\r\n\t});\r\n\r\n\r\n\t// add templates to dropdown\r\n\t//\tloading_more if we have another url in the queue\r\n\t//\tno_more_results if we don't have another url in the queue\r\n\tself.hook('after','refreshOptions',()=>{\r\n\r\n\t\tconst query\t\t= self.lastValue;\r\n\t\tvar option;\r\n\r\n\t\tif( canLoadMore(query) ){\r\n\r\n\t\t\toption = self.render('loading_more',{query:query});\r\n\t\t\tif( option ){\r\n\t\t\t\toption.setAttribute('data-selectable',''); // so that navigating dropdown with [down] keypresses can navigate to this node\r\n\t\t\t\tload_more_opt = option;\r\n\t\t\t}\r\n\r\n\t\t}else if( (query in pagination) && !dropdown_content.querySelector('.no-results') ){\r\n\t\t\toption = self.render('no_more_results',{query:query});\r\n\t\t}\r\n\r\n\t\tif( option ){\r\n\t\t\taddClasses(option,self.settings.optionClass);\r\n\t\t\tdropdown_content.append( option );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\t// add scroll listener and default templates\r\n\tself.on('initialize',()=>{\r\n\t\tdefault_values = Object.keys(self.options);\r\n\t\tdropdown_content = self.dropdown_content;\r\n\r\n\t\t// default templates\r\n\t\tself.settings.render = Object.assign({}, {\r\n\t\t\tloading_more:() => {\r\n\t\t\t\treturn `<div class=\"loading-more-results\">Loading more results ... </div>`;\r\n\t\t\t},\r\n\t\t\tno_more_results:() =>{\r\n\t\t\t\treturn `<div class=\"no-more-results\">No more results</div>`;\r\n\t\t\t}\r\n\t\t},self.settings.render);\r\n\r\n\r\n\t\t// watch dropdown content scroll position\r\n\t\tdropdown_content.addEventListener('scroll',()=>{\r\n\r\n\t\t\tif( !self.settings.shouldLoadMore.call(self) ){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// !important: this will get checked again in load() but we still need to check here otherwise loading_more will be set to true\r\n\t\t\tif( !canLoadMore(self.lastValue) ){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// don't call load() too much\r\n\t\t\tif( loading_more ) return;\r\n\r\n\r\n\t\t\tloading_more = true;\r\n\t\t\tself.load.call(self,self.lastValue);\r\n\t\t});\r\n\t});\r\n\r\n};\r\n"],"names":["iterate","object","callback","Array","isArray","forEach","key","hasOwnProperty","addClasses","elmts","classes","norm_classes","classesArray","castAsArray","map","el","cls","classList","add","args","_classes","trim","split","concat","filter","Boolean","arg","self","orig_canLoad","canLoad","orig_clearActiveOption","clearActiveOption","orig_loadCallback","loadCallback","pagination","dropdown_content","loading_more","load_more_opt","default_values","settings","shouldLoadMore","scroll_percent","clientHeight","scrollHeight","scrollTop","activeOption","selectable","index","from","indexOf","length","firstUrl","sortField","field","canLoadMore","query","maxOptions","children","clearFilter","option","value","items","setNextUrl","next_url","getUrl","clearPagination","call","hook","options","optgroups","clearOptions","first_option","undefined","dataset","valueField","lastValue","render","setAttribute","querySelector","optionClass","append","on","Object","keys","assign","no_more_results","addEventListener","load"],"mappings":"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","x_google_ignoreList":[0,1]}